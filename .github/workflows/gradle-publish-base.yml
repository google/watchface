# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

on:
  workflow_call:
    inputs:
      release_git_sha:
        type: string
        description: The git sha of the commit from where the current release will be built from.
        required: true
      release_name:
        type: string
        required: true

permissions:
  contents: write
  packages: write

jobs:
  build_memory_footprint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout project
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.release_git_sha }}
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "corretto"
          architecture: "x64"
      - name: Get project hash
        run: |
          git_hash=$(git rev-parse --short "$GITHUB_SHA")
          echo "git_hash=$git_hash" >> $GITHUB_ENV
      - name: Build memory-footprint.jar
        uses: gradle/actions/setup-gradle@v3
        with:
          build-root-directory: play-validations
          arguments: memory-footprint:jar -Dmemory-footprint.git_hash=${{ env.git_hash }} 
      - name: Build wff-validator
        uses: gradle/actions/setup-gradle@v3
        with:
          build-root-directory: third_party/wff
          arguments: :specification:validator:build
      - name: Copy LICENSE files
        run: |
          mv LICENSE.txt memory-footprint_LICENSE.txt
          mv third_party/wff/LICENSE.txt wff-validator_LICENSE.txt
      - name: Create XSD archive
        run: |
          cd third_party/wff/specification/documents/
          zip -r wff-xsd.zip *
      - name: Release all jars
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "${{ inputs.release_name }}"
          prerelease: false
          title: "Memory Footprint Build"
          files: |
            memory-footprint_LICENSE.txt
            wff-validator_LICENSE.txt
            **/memory-footprint.jar
            **/wff-validator.jar
            **/wff-xsd.zip

  publish_package:
    runs-on: ubuntu-latest
    needs: build_memory_footprint
    steps:
      - uses: actions/checkout@v4
      - name: Get latest release info
        id: get_release_info
        run: |
          response=$(curl \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/releases/latest"
          )
          echo "::set-output name=response::$response"
      - name: Download assets
        run: |
          release_info=$(echo "${{ steps.get_release_info.outputs.response }}" | jq -r .)
          assets=$(echo "$release_info" | jq -r '.assets| [.name, .browser_download_url] | @tsv')

          echo "$assets" | while IFS=$'\t' read -r name url; do
            echo "Downloading $name from $url"
            curl -Lo "$name" "$url"
          done
      - name: List downloaded files
        run: ls -l
