# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

on:
  workflow_call:
    inputs:
      release_git_sha:
        type: string
        description: The git sha of the commit from where the current release will be built from.
        required: true
      release_name:
        type: string
        required: true

permissions:
  contents: write
  packages: write

jobs:
  build_memory_footprint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout project
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.release_git_sha }}
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "corretto"
          architecture: "x64"
      - name: Get project hash
        run: |
          git_hash=$(git rev-parse --short "$GITHUB_SHA")
          echo "git_hash=$git_hash" >> $GITHUB_ENV
      - name: Build memory-footprint.jar
        uses: gradle/actions/setup-gradle@v3
        with:
          build-root-directory: play-validations
          arguments: memory-footprint:jar -Dmemory-footprint.git_hash=${{ env.git_hash }} 
      - name: Build wff-validator
        uses: gradle/actions/setup-gradle@v3
        with:
          build-root-directory: third_party/wff
          arguments: :specification:validator:build
      - name: Copy LICENSE files
        run: |
          mv LICENSE.txt memory-footprint_LICENSE.txt
          mv third_party/wff/LICENSE.txt wff-validator_LICENSE.txt
      - name: Create XSD archive
        run: |
          cd third_party/wff/specification/documents/
          zip -r wff-xsd.zip *
      - name: Release all jars
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "${{ inputs.release_name }}"
          prerelease: false
          title: "Memory Footprint Build"
          files: |
            memory-footprint_LICENSE.txt
            wff-validator_LICENSE.txt
            **/memory-footprint.jar
            **/wff-validator.jar
            **/wff-xsd.zip

  publish_packages:
    runs-on: ubuntu-latest
    needs: build_memory_footprint
    env:
      GH_TOKEN: ${{ github.token }}
    strategy:
      matrix:
        jar_file: [wff-validator.jar, memory-footprint.jar]
    steps:
      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install gh
      - name: Download asset
        run: |
          gh release download --repo "$GITHUB_REPOSITORY" --pattern ${{ matrix.jar_file }} 
      - name: Get JAR version
        id: get_version
        run: |
          VERSION=$(unzip -p ${{ matrix.jar_file }} META-INF/MANIFEST.MF | grep "^Version: " | cut -d' ' -f2)
          if [[ -z "$VERSION" ]]; then
            echo "::error file=${{ matrix.jar_file }}::Could not determine version from JAR's Manifest file"
            exit 1
          fi
          echo "::set-output name=version::$VERSION"
      - name: Determine final version
        id: final_version
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          if ${{ inputs.release_name == 'latest' }}; then
            VERSION="$VERSION-SNAPSHOT"
          fi
          echo "Final version: $VERSION"
          echo "::set-output name=final_version::$VERSION"

      - name: Determine artefact name
        id: artefact_id
        run: |
          FILE_NAME="${{ matrix.jar_file }}"
          FILE_NAME_WITHOUT_EXTENSION="${FILE_NAME%.*}"
          echo "::set-output name=artefact_id::$FILE_NAME_WITHOUT_EXTENSION"
      - name: create settings.xml
        run: |
            mkdir -p ~/.m2
            echo "<settings><servers><server><id>github</id><configuration><httpHeaders><property><name>Authorization</name><value>Bearer ${{ github.event.inputs.repo_token }}</value></property></httpHeaders></configuration></server></servers></settings>"
        shell: bash
        env:
          GITHUB_PATH: ~/.m2/
      - name: Publish to GitHub Packages
        run: |
          mvn deploy:deploy-file \
            -DgroupId=com.google.watchface \
            -DartifactId=${{ steps.artefact_id.outputs.artefact_id }} \
            -Dversion=${{ steps.final_version.outputs.final_version }} \
            -Dpackaging=jar \
            -Dfile=${{ matrix.jar_file }} \
            -Durl=https://maven.pkg.github.com/google/watchface \
            -DrepositoryId=github -s ~/.m2/settings.xml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
