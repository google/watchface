/*
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version "2.0.21"
}

def baseVersion = "1.4.1"

dependencies {
    implementation 'com.twelvemonkeys.imageio:imageio-webp:3.9.4'
    implementation 'com.twelvemonkeys.imageio:imageio-core:3.9.4'
    implementation 'com.google.code.gson:gson:2.11.0'
    implementation 'com.google.guava:guava:33.3.1-jre'
    implementation 'commons-cli:commons-cli:1.5.0'
    implementation 'com.android.tools.apkparser:binary-resources:31.7.3'
    implementation 'com.github.xgouchet:AXML:v1.0.1'
    implementation("com.android.tools.build:aapt2-proto:8.7.3-12006047")
    implementation("com.google.protobuf:protobuf-java:4.29.3")
    implementation project(':validator')

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'com.google.truth:truth:1.4.4'
    testImplementation 'com.google.jimfs:jimfs:1.3.0'
}

compileJava {
    sourceCompatibility = '17'
    targetCompatibility = '17'
}

compileKotlin {
    kotlinOptions.jvmTarget = "17"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "17"
}

configurations {
    executableJar {
        canBeConsumed = true
        canBeResolved = false
        attributes {
            attribute(LibraryElements.LIBRARY_ELEMENTS_ATTRIBUTE, objects.named(LibraryElements, 'executableJar'))
        }
    }
}

jar {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)

    exclude("META-INF/*.RSA", "META-INF/*.DSA", "META-INF/*.SF")

    manifest {
        attributes "Main-Class": "com.google.wear.watchface.dfx.memory.ResourceMemoryEvaluator"
        // Use `gradle :memory-footprint:jar -Dmemory-footprint.git_hash=$(git rev-parse --short HEAD)` to store
        // the current build's hash in the manifest file.
        if (System.getProperty("memory-footprint.git_hash")) {
            attributes "Git-Hash": System.getProperty("memory-footprint.git_hash")
        }
        attributes "Version": baseVersion
    }

    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}

artifacts {
    executableJar(jar)
}

afterEvaluate {
    tasks.named("jar") {
        dependsOn(":validator:jar")
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

test {
    testLogging {
        outputs.upToDateWhen { false }
        events "passed", "skipped", "failed"
        showStandardStreams = true
        exceptionFormat = "full"
    }

    // build the artifacts needed for the ResourceMemoryEvaluatorTest.GoldenTest
    dependsOn(
            "test-samples:sample-wf:bundleRelease",
            "test-samples:sample-wf:assembleRelease",
            "test-samples:sample-wf:unpackBundle",
            "test-samples:sample-wf:resDirectory",
            "test-samples:sample-wf:zipApk"
    )
}
